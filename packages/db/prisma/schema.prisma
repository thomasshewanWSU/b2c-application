generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int           @id @default(autoincrement())
  urlId           String        @unique
  name            String
  brand           String
  description     String        
  specifications  String       
  detailedDescription   String       
  price           Float
  imageUrl        String
  category        String
  stock           Int           @default(0)
  featured        Boolean       @default(false)
  active          Boolean       @default(true) 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  OrderItem       OrderItem[]
  reviews         Review[]     
  cartItems       CartItem[]   
  anonymousCartItems AnonymousCartItem[] 


}


model CartItem {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int           @default(1)
  selectedOptions   String?       
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([userId, productId, selectedOptions])  
}

model AnonymousCartItem {
  id                Int           @id @default(autoincrement())
  cartId            String        
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int           @default(1)
  selectedOptions   String?       
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([cartId, productId, selectedOptions]) 
}
model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String?
  password        String?       
  role            String        @default("customer") 
  active          Boolean       @default(true) 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]
  reviews         Review[]      
  cartItems       CartItem[]    
  accounts        Account[]     
  sessions        Session[]    
}

model Order {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  status            String        @default("pending") 
  total             Float
  notes             String?
  shippingAddress   String        
  billingAddress    String?        
  paymentMethod     String
  paymentId         String?      
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             OrderItem[]
}

model OrderItem {
  id                Int           @id @default(autoincrement())
  orderId           Int
  order             Order         @relation(fields: [orderId], references: [id])
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float        
  productName       String       
  productBrand      String?
  productImage      String?
  productOptions    String?      
}

model Review {
  id                Int           @id @default(autoincrement())
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  rating            Float
  title             String?
  comment           String
  verified          Boolean       @default(false) 
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}