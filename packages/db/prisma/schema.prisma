generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int           @id @default(autoincrement())
  urlId           String        @unique
  name            String
  brand           String
  description     String        // Use Text for longer content
  specifications  String       // JSON or Markdown stored as text
  detailedDescription   String       // Add this field for markdown content
  price           Float
  imageUrl        String
  category        String
  stock           Int           @default(0)
  featured        Boolean       @default(false)
  active          Boolean       @default(true) // Soft deletion flag
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  OrderItem       OrderItem[]
  reviews         Review[]      // Relation to reviews
  cartItems       CartItem[]    // Add this relation
  anonymousCartItems AnonymousCartItem[] // Add this relation


}
// Add this model to your schema.prisma file

model CartItem {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int           @default(1)
  selectedOptions   String?       // JSON string for color, size, etc.
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([userId, productId, selectedOptions])  // Prevent duplicate cart items with same options
}
// Add the AnonymousCartItem model after your CartItem model

model AnonymousCartItem {
  id                Int           @id @default(autoincrement())
  cartId            String        // Cookie-based identifier
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int           @default(1)
  selectedOptions   String?       // JSON string for color, size, etc.
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([cartId, productId, selectedOptions])  // Prevent duplicate cart items with same options
}
model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String?
  password        String
  role            String        @default("customer") // "customer" or "admin"
  active          Boolean       @default(true) // Soft deletion flag
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]
  reviews         Review[]      // Relation to reviews
  cartItems       CartItem[]    // Add this relation

}

model Order {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  status            String        @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  total             Float
  notes             String?
  shippingAddress   String        // Store full address details
  billingAddress    String?        // Optional separate billing address
  paymentMethod     String
  paymentId         String?       // Store payment gateway transaction ID
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             OrderItem[]
}

model OrderItem {
  id                Int           @id @default(autoincrement())
  orderId           Int
  order             Order         @relation(fields: [orderId], references: [id])
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float         // Price at time of purchase
  productName       String        // Store product details at time of purchase
  productBrand      String?
  productImage      String?
  productOptions    String?      // JSON string for any selected options
}

model Review {
  id                Int           @id @default(autoincrement())
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  rating            Float
  title             String?
  comment           String
  verified          Boolean       @default(false) // Was this a verified purchase
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}
